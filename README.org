* Domainion
  A domain specific language for deck building games

** Motivation

   There's no precise definition of a deck builder.  It's a sort of competitive card game that involves moving cards around in order to assemble a combination of cards, which are usually used to get more cards.  *Dominion* is the mother of all deck building games, on which all others are inspired.

*** A description of dominion

    Dominion is a deck building card game.  Each player competes to get the most points.  They do this buy buying cards.
    There are three kinds of cards
    - victory cards - these will get you points, but don't do anything else
    - treasure cards - these will help you buy more cards
    - action cards - these will do something (usually let you draw more cards, or get more money)

    When it's your turn, you draw a load of cards, and play as many action cards as you can, then buy what you want.  An interesting strategy is to play action cards that let you draw more action cards, and play those.

    Dominion was released in 2008, and created an entire genre of board games.  It's the mother of all deck builders.

*** Motivation continued

    Suppose we wish to create a Dominion-inspired deck building game (this is a tautology - all deck building games are Dominion-inspired!).  We need a way of modeling cards and the actions they can perform.

    Imagine you're in a game jam.  Quick!  You have 5 minutes to code up this game!  What would you do?

    As a pure functional Haskell programmer, you'll probably write something like GameJam.hs

    We have a data model for a =Game= state, which is made of each player's state, including their cards.

    Each card has an =Action= which is ultimately a Haskell function.  This function modifies the game state, so uses a =StateT= monad, and also probably requires some player input, so uses an =IO=.  I've used a =StateT Game IO ()=

    If you had 5 minutes, or a day, or a week to create a specific game, this code would work perfectly well.

    Imagine instead that you're trying to /design/ these games, and you expect to create hundreds of such cards (Dominion in total has over 500).  Not only that, once you've created a base game, you intend to extend it with different mechanics - you might add a new card type, or change the way the point system works.  Even if an extension introduces a new mechanic, it still needs to be compatible with the initial set of cards, and usually all other extensions.

    The landscape of our problem changes from producing something fast and functional to a problem of maintenance and extension.

*** Maintenance

    Instead of simply constructing a deck-builder, we want to construct a deck-building engine.  Some questions arise:

When trying to construct one, we might want to ask:
    - How can we tell if a new card is exactly the same as an existing one?
    - Can we generate a rulebook with a description of exactly what each card does?
    - More ambitiously, can we generate it's description?
    - Can we validate that a card can be run without actually running it? (some cards need non-empty piles)
    - Can we ensure that an action is sensible within the rules of the game (e.g. doesn't destroy cards, or construct arbitrary ones)?

*Spoiler*:  My opinionated answer is that we /can/ do all of these things!  At least, if we use a tagless-final eDSL.

In order to justify this, let's take a look at a single problem - generating a rulebook for a card, given it's action.  Is it possible to generate a =String= rule describing exactly what a card does from our =StateT Game IO ()=?  Not without a great deal of trouble.

How else can we go about it?  Let's take a simpler problem - consider we have the program

program = 1 + 2 + 3

and we want to generate a description of what it does.  Our description might be "((1 + 2) + 3)". Is it possible to generate this from the program?

We can, on the other hand, have some representation that we interpret to our program and also to our text

/Example of an initial representation/

We've created an eDSL for integer addition.

*Aside* what is an eDSL?

This is known as an *initial encoding*

    This approach is quite nice to start with because it's simple.
    - There's a separation between the syntax and the semantics
    - We can interpret the term in multiple ways
    - It's compositional - a term is made up of other terms, and knows little about the terms that make it up.  We can interpret this without context.

    But poses problems for extension.  Let's say we have a language of booleans too.  Putting these two together is hard.


This encoding has several drawbacks when it comes to extension.

/Show multiplication/

You might have heard this as the expression problem.

Fortunately, there's a different way of representing terms.  Instead of using a concrete datatype, we can use a typeclass:

/Final encoding/

Each of our interpreters is an instance of this typeclass.

Our base representation is known as the syntax of our language - it just has a load of terms, and no meaning.
Our instances are the things that give it meaning - this is our semantics.

    Using a =StateT Game IO ()= to represent our card actions is problematic, as it doesn't allow us to answer these questions.  A domain specific language is a better fit.

*** Snip: What is an embedded DSL?

    A domain specific language is a language specific to a given problem (domain).  In this case, our domain is the problem of deck-builders.
    Designing a programming language from scratch is a hard task, and it's often easier to design a language within an existing one (such as Haskell).
    We can use Haskell constructs (data structures, functions, and general behaviour).  If you like, our DSL is a tiny subset of Haskell.  This is known as /embedding/.  Haskell is known as the host language, and our eDSL is the object language.

    A language is a collection of terms (syntax) that can have multiple interpretations (semantics).

*** A start on our DSL

Reiterate that our interpreters can print a description and also evaluate.  We'll take it on good faith that we can define more interpreters down the line.

    If we look at the cards in the base dominion set, we can see they they share some natural language terms.  This gives us a clue to what our DSL might be like.

    /A common misconception is that we aren't trying to interpret these descriptions as code - natural language is vague, contextual and thus notoriously difficult to interpret.  Our DSL might look very different./

    There are numbers here, and conditions.  We reference cards, and piles of cards.  However, the language isn't that simple.  For example *library* and *council room*, or *beurocrat*.  If we can model this as a language, it needs to support variables, control flows.  The technique we use to design this needs to be powerful enough to model these.

**** TODO Does this give the reader the correct mindset?
     - Need to state the problem statement

*** Final tagless encoding

    One way of modeling this is to use datatypes

    /Insert the initial encoding/

    /Insert the final encoding/

    Our syntax is a typeclass.  Our semantics (interpreters), are instances of this typeclass, coupled with functions that make them up.

    What if we want to extend this language?  That's easy!  We just extend the typeclass.

**** TODO What about fixed points?

**** TODO In all honesty, I haven't explored the extension of the initial encoding too much

     I can't find anything that suggests it's improved in comparison.

     Final tagless encodings just seemed an interesting approach.

*** Our first language: resources

    Tackling our larger DSL would be more than we can chew.  Let's split it up into smaller components.  Let's take these statements

    #+begin_example
    +1 action
    +1 buy
    #+end_example

    And consider how to construct them.  We already have a language of integers.  =action= and =buy= don't belong to this.  Let's construct a language of resources

    /The resource language/

    Can we compose these languages such that we interpret them to a =Action= and a =Description=?

    /A naive attempt/

    Does this work?

    Let's take a step back and think about what we want to do here.
      - action isn't the value of action.  It's more like a mutable reference.  In FP, this is a getter and a setter
      - + 1 represents the value of 1
      - We could make the resource language be typed with the type `Lens`.
        - This type seems arbitrary.  We're mixing meaning with the syntax.
        - Another way of thinking about these is that we actually have two languages here.

    Remember that our interpreter for our int language was the identity function.  Not so for our interpreter for our Resource language.

    /Write a (->) interpreter for =Int= and have our evaluator return a =Game -> Int=/

    Provided we have the same interpreter, we can compose the languages

    Is this what we want?  Can I use this function to add 1 to the action count.  No, I get the result of adding one to the action count, but I don't know what to do with that.  Not only that, I can't (without inspection), figure out that the action count is what I need to update.

    When we refer to a resource, we're actually referring to something *mutable*.  In functional programming, we don't mutate, but we do modify.  We need a way of setting the resource (Int -> Game).  Such that we end up with a function from Game -> Game.

    /embedding/


**** TODO This is a difficult concept to grasp.  Should we introduce it this early?  Do we actually need it?

     We can get away without it, if we type the lenses.

     What about statement composition?

     /example typeclass/

     Does this look familiar to you?  This is a =Semigroup=.  Whenever you're designing these DSLs, make sure you take a long hard look at how things compose.  It's very likely that there's an existing typeclass that you can make use of.

*** Our second language: movement

    Let's first write the predicate.

    We've already looked at integers.  We can model the properties of a card in a similar way to resources.
    But now we have a problem in composition.  We can construct statements that are syntactically valid, but make no sense.

    This is because our language is untyped.  All statements can be inserted in all positions.  We need types.  These are fairly easy to add

    /Typed resources/

    We can now interpret these statements to a =Card -> Bool= predicate, as well as a string.

    We're reusing our =Int= language in two parts.  Writing out integers and booleans might have seemed cumbersome, but they're very useful to have.

    With our predicate, we're now ready to tackle a language of motion. =Gain= a card means to choose a card from the supply pile to your own discard pile.
    In other words, we're moving from pile to pile.  Let's construct a language of piles.

    /Pile language/

    This looks very much like our Resource and Card languages - they aren't composable, and simply provide access to fields.

    And now the interesting part: composition!

    Let's naively attempt to write something

    #+begin_src
pick :: repr Pile -> repr Bool -> repr Card
put :: repr Card -> repr Pile -> repr ()
    #+end_src

    Our statements might be
    =put (pick supply (+ 4))=

    Any ideas?

    =repr Pile= is also something mutable - it doesn't belong in our language, but lives in it's own one.  It should be an =embedded term=.
    The card predicate too is something in it's own language.

    Does the language of motion need to be it's own thing?

    We can interpret it the same, and can use all (typed) terms in the same position.  It can be part of the dominion language.

    Finally, we have a semblance of a dominion language that we can use to model cards!

    Because this is a lot to digest, here's a picture of my cat.
    - Tagless final encoding
    - Composition
    - Embedding

    This is still, on the scale of the problem, quite basic.
